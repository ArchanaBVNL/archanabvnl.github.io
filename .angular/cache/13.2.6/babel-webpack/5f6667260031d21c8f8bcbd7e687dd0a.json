{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"src/app/services/maps.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"./weather/weather.component\";\nimport * as i6 from \"./map/map.component\";\nimport * as i7 from \"./alerts-sports/alerts-sports.component\";\nimport * as i8 from \"./week-forecast/week-forecast.component\";\n\nconst _c0 = function (a1) {\n  return [\"/sports\", a1];\n};\n\nfunction DashboardComponent_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\")(1, \"a\", 25);\n    i0.ɵɵtext(2, \" Sports \");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction1(1, _c0, ctx_r0.currentLocation));\n  }\n}\n\nconst _c1 = function () {\n  return [\"/sports\", \"02215\"];\n};\n\nfunction DashboardComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"a\", 25);\n    i0.ɵɵtext(1, \" Sports \");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c1));\n  }\n}\n\nfunction DashboardComponent_select_13_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const location_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(location_r7);\n  }\n}\n\nfunction DashboardComponent_select_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"select\", 26, 27);\n    i0.ɵɵlistener(\"change\", function DashboardComponent_select_13_Template_select_change_0_listener($event) {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.changeFavoriteLocation($event);\n    });\n    i0.ɵɵelementStart(2, \"option\", 28);\n    i0.ɵɵtext(3, \"Select Location\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"option\");\n    i0.ɵɵtext(5, \"Favorites\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(6, DashboardComponent_select_13_option_6_Template, 2, 1, \"option\", 29);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r3.locations);\n  }\n}\n\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(formBuilder, mapsService) {\n      this.formBuilder = formBuilder;\n      this.mapsService = mapsService;\n      this.currentLocation = '02215';\n      this.searchLocation = new Subject();\n      this.imageUrl = new Subject();\n      this.firstLocation = '';\n      this.temperatureUnit = new Subject();\n      this.tempUnit = 'F';\n      this.isFarenheit = true;\n      this.locations = [];\n      this.favLocationsChanged = new BehaviorSubject(false);\n      this.newImageUrl = '';\n      this.renderComponent = false;\n    }\n\n    ngOnInit() {\n      // clear search input box entries\n      this.form = this.formBuilder.group({\n        search: [''],\n        favLocation: ['']\n      }); // set temperature unit to F or C depending on user selection\n\n      setTimeout(() => this.temperatureUnit.next(this.tempUnit), 0); // get the locations from favorites local storage if any\n\n      this.locations = JSON.parse(localStorage.getItem('locations') || '[]'); // get current position of the user\n\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          // start coordinates of the user\n          let latitude = position.coords.latitude;\n          let longitude = position.coords.longitude;\n          let input = [latitude, longitude]; // set the current zip code of the user\n\n          this.setZipCode(input); // get the image URL for the initial location or searched location\n\n          this.setImageURL(input);\n          this.renderComponent = true;\n        });\n      } else {\n        console.log('Geolocation support not available');\n      }\n    } // set the location depending on user search\n\n\n    changeLocation() {\n      // the user entered location in search box\n      this.currentLocation = this.form.controls['search'].value; // if current location is set then search the requested location\n\n      if (this.currentLocation.length > 0 && this.currentLocation != undefined && this.currentLocation != null) {\n        setTimeout(() => this.searchLocation.next(this.currentLocation), 0);\n      }\n    } // update favorites depending on users choice\n\n\n    changeFavoriteLocation(e) {\n      // get the current location\n      this.currentLocation = e.target.value;\n\n      if (this.currentLocation !== 'Favorites') {\n        // if location not already in favorites then add to favorites\n        setTimeout(() => this.searchLocation.next(this.currentLocation), 0);\n      }\n    } // set temperature unit to F or C\n\n\n    setTempUnit() {\n      if (this.isFarenheit) {\n        this.tempUnit = 'C';\n      } else {\n        this.tempUnit = 'F';\n      } // update temperature unit\n\n\n      setTimeout(() => this.temperatureUnit.next(this.tempUnit), 0);\n    } // get the favorites from the local storage\n\n\n    fetchItemsFromStorage() {\n      this.locations = JSON.parse(localStorage.getItem('locations') || '[]');\n    } // get the user's current zip code using mapsService\n\n\n    setZipCode(input) {\n      this.mapsService.getZipCode(input).subscribe({\n        next: data => {\n          // if a valid location then get the postal code / zip code\n          if (data.results != null) {\n            if (data.results[0].locations) {\n              this.currentLocation = data.results[0].locations[0].postalCode;\n            }\n          }\n        },\n        error: error => {\n          console.log('Invalid input, Unable to get zip code. ', error);\n        }\n      });\n    } // get user location map image URL\n\n\n    setImageURL(input) {\n      // call mapsService to get an image URL for the given user location\n      this.mapsService.getMapImage(input).subscribe({\n        next: data => {\n          var reader = new FileReader();\n          reader.readAsDataURL(data);\n\n          reader.onload = event => {\n            this.imgUrl = reader.result; // set the image url\n\n            setTimeout(() => this.imageUrl.next(this.imgUrl), 0);\n          };\n        },\n        error: error => {\n          console.log(\"unable to get location map, \", error);\n        }\n      });\n    } // update the image url on location change\n\n\n    updateImageUrl(newUrl) {\n      this.newImageUrl = newUrl;\n      setTimeout(() => this.imageUrl.next(this.newImageUrl), 0);\n    }\n\n  }\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.MapsService));\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    inputs: {\n      favLocationsChanged: \"favLocationsChanged\",\n      newImageUrl: \"newImageUrl\"\n    },\n    decls: 35,\n    vars: 11,\n    consts: [[2, \"width\", \"230px\"], [\"routerLink\", \"/dashboard\", 2, \"color\", \"white\", \"cursor\", \"pointer\", \"text-decoration\", \"none\"], [2, \"margin-left\", \"1rem\"], [\"src\", \"./assets/rainbow.svg\", \"width\", \"50px\", 2, \"margin-top\", \"-10px\", \"margin-right\", \"5px\"], [\"routerLink\", \"/news\", \"routerLinkActive\", \"active\", 2, \"position\", \"absolute\", \"margin-left\", \"16rem\", \"margin-top\", \"-34px\", \"font-size\", \"18px\", \"color\", \"white\", \"cursor\", \"pointer\", \"text-decoration\", \"none\"], [4, \"ngIf\", \"ngIfElse\"], [\"elseBlk\", \"\"], [2, \"position\", \"absolute\", \"right\", \"0\", \"margin-right\", \"4rem\", \"margin-top\", \"-41px\"], [1, \"d-flex\", 3, \"formGroup\", \"ngSubmit\", \"click\"], [\"style\", \"margin-right: 20px;\", \"formControlName\", \"favLocation\", \"class\", \"form-select form-control\", 3, \"change\", 4, \"ngIf\"], [\"formControlName\", \"search\", \"name\", \"search\", \"type\", \"search\", \"placeholder\", \"Search City or Zip\", \"aria-label\", \"Search\", 1, \"form-control\", \"me-2\"], [\"normalSearch\", \"\"], [\"id\", \"search\", \"type\", \"submit\", 1, \"btn\", \"btn-info\"], [1, \"d-flex\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"id\", \"flexSwitchCheckChecked\", 1, \"form-check-input\", 3, \"ngModel\", \"ngModelChange\", \"click\"], [1, \"form-check-label\"], [1, \"row\"], [1, \"col-sm-5\"], [3, \"searchText\", \"tempUnit\", \"favLocationsChanged\", \"newImageUrl\"], [1, \"col-sm-3\"], [3, \"imgUrl\"], [1, \"col-sm-4\"], [3, \"searchText\"], [3, \"searchText\", \"tempUnit\"], [\"routerLinkActive\", \"active\", 2, \"position\", \"absolute\", \"margin-left\", \"20rem\", \"margin-top\", \"-34px\", \"font-size\", \"18px\", \"color\", \"white\", \"cursor\", \"pointer\", \"text-decoration\", \"none\", 3, \"routerLink\"], [\"formControlName\", \"favLocation\", 1, \"form-select\", \"form-control\", 2, \"margin-right\", \"20px\", 3, \"change\"], [\"favSearch\", \"\"], [\"disabled\", \"\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r10 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"div\")(1, \"div\", 0)(2, \"a\", 1)(3, \"h4\", 2);\n        i0.ɵɵelement(4, \"img\", 3);\n        i0.ɵɵtext(5, \" Weather Now \");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"a\", 4);\n        i0.ɵɵtext(7, \" News \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, DashboardComponent_div_8_Template, 3, 3, \"div\", 5);\n        i0.ɵɵtemplate(9, DashboardComponent_ng_template_9_Template, 2, 2, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 7)(12, \"form\", 8);\n        i0.ɵɵlistener(\"ngSubmit\", function DashboardComponent_Template_form_ngSubmit_12_listener() {\n          return ctx.changeLocation();\n        })(\"click\", function DashboardComponent_Template_form_click_12_listener() {\n          i0.ɵɵrestoreView(_r10);\n\n          const _r4 = i0.ɵɵreference(15);\n\n          return _r4.value = \"\";\n        });\n        i0.ɵɵtemplate(13, DashboardComponent_select_13_Template, 7, 1, \"select\", 9);\n        i0.ɵɵelement(14, \"input\", 10, 11);\n        i0.ɵɵelementStart(16, \"button\", 12);\n        i0.ɵɵtext(17, \"Search\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(18, \"div\")(19, \"div\", 13)(20, \"label\");\n        i0.ɵɵtext(21, \"\\u2103\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(22, \" \\u00A0\\u00A0 \");\n        i0.ɵɵelementStart(23, \"div\", 14)(24, \"input\", 15);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_input_ngModelChange_24_listener($event) {\n          return ctx.isFarenheit = $event;\n        })(\"click\", function DashboardComponent_Template_input_click_24_listener() {\n          return ctx.setTempUnit();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(25, \"label\", 16);\n        i0.ɵɵtext(26, \"\\u2109\");\n        i0.ɵɵelementEnd()()()()();\n        i0.ɵɵelementStart(27, \"div\", 17)(28, \"div\", 18)(29, \"app-weather\", 19);\n        i0.ɵɵlistener(\"favLocationsChanged\", function DashboardComponent_Template_app_weather_favLocationsChanged_29_listener() {\n          return ctx.fetchItemsFromStorage();\n        })(\"newImageUrl\", function DashboardComponent_Template_app_weather_newImageUrl_29_listener($event) {\n          return ctx.updateImageUrl($event);\n        });\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(30, \"div\", 20);\n        i0.ɵɵelement(31, \"app-map\", 21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"div\", 22);\n        i0.ɵɵelement(33, \"app-alerts-sports\", 23);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(34, \"app-week-forecast\", 24);\n      }\n\n      if (rf & 2) {\n        const _r1 = i0.ɵɵreference(10);\n\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentLocation != undefined)(\"ngIfElse\", _r1);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.locations.length > 0);\n        i0.ɵɵadvance(11);\n        i0.ɵɵproperty(\"ngModel\", ctx.isFarenheit);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"searchText\", ctx.searchLocation)(\"tempUnit\", ctx.temperatureUnit);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"imgUrl\", ctx.imageUrl);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"searchText\", ctx.searchLocation);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"searchText\", ctx.searchLocation)(\"tempUnit\", ctx.temperatureUnit);\n      }\n    },\n    directives: [i3.RouterLinkWithHref, i3.RouterLinkActive, i4.NgIf, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i4.NgForOf, i1.DefaultValueAccessor, i1.CheckboxControlValueAccessor, i1.NgModel, i5.WeatherComponent, i6.MapComponent, i7.AlertsSportsComponent, i8.WeekForecastComponent],\n    styles: [\".switch[_ngcontent-%COMP%]{position:relative;display:inline-block;width:45px;height:20px;margin:20px}.switch[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]{display:none;background-color:#ccc}.slider[_ngcontent-%COMP%]{position:absolute;cursor:pointer;top:0;left:0;right:0;bottom:0;background-color:#ccc;transition:.4s}.slider[_ngcontent-%COMP%]:before{position:absolute;content:\\\"\\\";height:26px;width:26px;left:0px;right:0px;bottom:-3px;background-color:#2196f3;transition:.4s}input[_ngcontent-%COMP%]:checked + .slider[_ngcontent-%COMP%]:before{transform:translate(20px)}.slider.round[_ngcontent-%COMP%]{border-radius:20px}.slider.round[_ngcontent-%COMP%]:before{border-radius:50%}\"]\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}